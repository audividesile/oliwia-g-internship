// @generated by protobuf-ts 1.0.11
// @generated from protobuf file "base.proto" (syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message AmqpMessage
 */
export interface AmqpMessage {
    /**
     * @generated from protobuf field: AmqpResult result = 1;
     */
    result: AmqpResult;
    /**
     * @generated from protobuf field: bytes body = 2;
     */
    body: Uint8Array;
    /**
     * @generated from protobuf field: string token = 3;
     */
    token: string;
}
/**
 * @generated from protobuf message CommonValue
 */
export interface CommonValue {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * @generated from protobuf message Error
 */
export interface Error {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: string stacktrace = 3;
     */
    stacktrace: string;
}
/**
 * @generated from protobuf message MessageContext
 */
export interface MessageContext {
    /**
     * @generated from protobuf field: string route = 1;
     */
    route: string;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message CredentialsForm
 */
export interface CredentialsForm {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message LogInfoList
 */
export interface LogInfoList {
    /**
     * @generated from protobuf field: repeated LogInfo list = 1;
     */
    list: LogInfo[];
}
/**
 * @generated from protobuf message LogInfo
 */
export interface LogInfo {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string userId = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string clientId = 3;
     */
    clientId: string;
    /**
     * @generated from protobuf field: string clientName = 4;
     */
    clientName: string;
    /**
     * @generated from protobuf field: double cpuUsage = 5;
     */
    cpuUsage: number;
    /**
     * @generated from protobuf field: double ramUsage = 7;
     */
    ramUsage: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 6;
     */
    timestamp?: Timestamp;
}
/**
 * @generated from protobuf message AdminConfigChange
 */
export interface AdminConfigChange {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string defaultNotificationType = 2;
     */
    defaultNotificationType: string;
    /**
     * @generated from protobuf field: string email = 3;
     */
    email: string;
    /**
     * @generated from protobuf field: string phoneNumber = 4;
     */
    phoneNumber: string;
}
/**
 * @generated from protobuf message Notification
 */
export interface Notification {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: string meerkatId = 2;
     */
    meerkatId: string;
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
    /**
     * @generated from protobuf field: string type = 4;
     */
    type: string;
}
/**
 * @generated from protobuf message NotificationData
 */
export interface NotificationData {
    /**
     * @generated from protobuf field: string to = 1;
     */
    to: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message MeerkatData
 */
export interface MeerkatData {
    /**
     * @generated from protobuf field: string cpu = 1;
     */
    cpu: string;
    /**
     * @generated from protobuf field: string ram = 2;
     */
    ram: string;
    /**
     * @generated from protobuf field: string type = 3;
     */
    type: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 4;
     */
    timestamp?: Timestamp;
}
/**
 * @generated from protobuf message AdminInfo
 */
export interface AdminInfo {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 3;
     */
    phone: string;
    /**
     * @generated from protobuf field: string triggerLevel = 4;
     */
    triggerLevel: string;
}
/**
 * @generated from protobuf message MeerkatInfo
 */
export interface MeerkatInfo {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string token = 3;
     */
    token: string;
    /**
     * @generated from protobuf field: AdminInfo adminInfo = 4;
     */
    adminInfo?: AdminInfo;
}
/**
 * @generated from protobuf message MeerkatInfoList
 */
export interface MeerkatInfoList {
    /**
     * @generated from protobuf field: repeated MeerkatInfo list = 1;
     */
    list: MeerkatInfo[];
}
/**
 * @generated from protobuf message AdminClient
 */
export interface AdminClient {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string meerkatId = 2;
     */
    meerkatId: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message AdminClientList
 */
export interface AdminClientList {
    /**
     * @generated from protobuf field: repeated AdminClient list = 1;
     */
    list: AdminClient[];
}
/**
 * @generated from protobuf message MeerkatLog
 */
export interface MeerkatLog {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: double cpuUsage = 2;
     */
    cpuUsage: number;
    /**
     * @generated from protobuf field: double ramUsage = 3;
     */
    ramUsage: number;
    /**
     * @generated from protobuf field: string type = 4;
     */
    type: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 5;
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf field: string name = 6;
     */
    name: string;
}
/**
 * @generated from protobuf message MeerkatLogList
 */
export interface MeerkatLogList {
    /**
     * @generated from protobuf field: repeated MeerkatLog list = 1;
     */
    list: MeerkatLog[];
}
/**
 * @generated from protobuf enum AmqpResult
 */
export enum AmqpResult {
    /**
     * @generated from protobuf enum value: SUCCESS = 0;
     */
    SUCCESS = 0,
    /**
     * @generated from protobuf enum value: FAILED = 1;
     */
    FAILED = 1,
    /**
     * @generated from protobuf enum value: NONE = 2;
     */
    NONE = 2
}
/**
 * Type for protobuf message AmqpMessage
 */
class AmqpMessage$Type extends MessageType<AmqpMessage> {
    constructor() {
        super("AmqpMessage", [
            { no: 1, name: "result", kind: "enum", T: () => ["AmqpResult", AmqpResult] },
            { no: 2, name: "body", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AmqpMessage>): AmqpMessage {
        const message = { result: 0, body: new Uint8Array(0), token: "" };
        if (value !== undefined)
            reflectionMergePartial<AmqpMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AmqpMessage): AmqpMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AmqpResult result */ 1:
                    message.result = reader.int32();
                    break;
                case /* bytes body */ 2:
                    message.body = reader.bytes();
                    break;
                case /* string token */ 3:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AmqpMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AmqpResult result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        /* bytes body = 2; */
        if (message.body.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.body);
        /* string token = 3; */
        if (message.token !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const AmqpMessage = new AmqpMessage$Type();
/**
 * Type for protobuf message CommonValue
 */
class CommonValue$Type extends MessageType<CommonValue> {
    constructor() {
        super("CommonValue", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommonValue>): CommonValue {
        const message = { value: "" };
        if (value !== undefined)
            reflectionMergePartial<CommonValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonValue): CommonValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const CommonValue = new CommonValue$Type();
/**
 * Type for protobuf message Error
 */
class Error$Type extends MessageType<Error> {
    constructor() {
        super("Error", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stacktrace", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Error>): Error {
        const message = { type: "", message: "", stacktrace: "" };
        if (value !== undefined)
            reflectionMergePartial<Error>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Error): Error {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* string stacktrace */ 3:
                    message.stacktrace = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Error, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* string stacktrace = 3; */
        if (message.stacktrace !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.stacktrace);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const Error = new Error$Type();
/**
 * Type for protobuf message MessageContext
 */
class MessageContext$Type extends MessageType<MessageContext> {
    constructor() {
        super("MessageContext", [
            { no: 1, name: "route", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MessageContext>): MessageContext {
        const message = { route: "", token: "" };
        if (value !== undefined)
            reflectionMergePartial<MessageContext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageContext): MessageContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string route */ 1:
                    message.route = reader.string();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string route = 1; */
        if (message.route !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.route);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const MessageContext = new MessageContext$Type();
/**
 * Type for protobuf message CredentialsForm
 */
class CredentialsForm$Type extends MessageType<CredentialsForm> {
    constructor() {
        super("CredentialsForm", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CredentialsForm>): CredentialsForm {
        const message = { email: "", password: "" };
        if (value !== undefined)
            reflectionMergePartial<CredentialsForm>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CredentialsForm): CredentialsForm {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CredentialsForm, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const CredentialsForm = new CredentialsForm$Type();
/**
 * Type for protobuf message LogInfoList
 */
class LogInfoList$Type extends MessageType<LogInfoList> {
    constructor() {
        super("LogInfoList", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LogInfo }
        ]);
    }
    create(value?: PartialMessage<LogInfoList>): LogInfoList {
        const message = { list: [] };
        if (value !== undefined)
            reflectionMergePartial<LogInfoList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogInfoList): LogInfoList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated LogInfo list */ 1:
                    message.list.push(LogInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogInfoList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated LogInfo list = 1; */
        for (let i = 0; i < message.list.length; i++)
            LogInfo.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const LogInfoList = new LogInfoList$Type();
/**
 * Type for protobuf message LogInfo
 */
class LogInfo$Type extends MessageType<LogInfo> {
    constructor() {
        super("LogInfo", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "clientId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "clientName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "cpuUsage", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "ramUsage", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<LogInfo>): LogInfo {
        const message = { id: "", userId: "", clientId: "", clientName: "", cpuUsage: 0, ramUsage: 0 };
        if (value !== undefined)
            reflectionMergePartial<LogInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogInfo): LogInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string userId */ 2:
                    message.userId = reader.string();
                    break;
                case /* string clientId */ 3:
                    message.clientId = reader.string();
                    break;
                case /* string clientName */ 4:
                    message.clientName = reader.string();
                    break;
                case /* double cpuUsage */ 5:
                    message.cpuUsage = reader.double();
                    break;
                case /* double ramUsage */ 7:
                    message.ramUsage = reader.double();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 6:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string userId = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string clientId = 3; */
        if (message.clientId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.clientId);
        /* string clientName = 4; */
        if (message.clientName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.clientName);
        /* double cpuUsage = 5; */
        if (message.cpuUsage !== 0)
            writer.tag(5, WireType.Bit64).double(message.cpuUsage);
        /* double ramUsage = 7; */
        if (message.ramUsage !== 0)
            writer.tag(7, WireType.Bit64).double(message.ramUsage);
        /* google.protobuf.Timestamp timestamp = 6; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const LogInfo = new LogInfo$Type();
/**
 * Type for protobuf message AdminConfigChange
 */
class AdminConfigChange$Type extends MessageType<AdminConfigChange> {
    constructor() {
        super("AdminConfigChange", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "defaultNotificationType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "phoneNumber", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AdminConfigChange>): AdminConfigChange {
        const message = { id: "", defaultNotificationType: "", email: "", phoneNumber: "" };
        if (value !== undefined)
            reflectionMergePartial<AdminConfigChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdminConfigChange): AdminConfigChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string defaultNotificationType */ 2:
                    message.defaultNotificationType = reader.string();
                    break;
                case /* string email */ 3:
                    message.email = reader.string();
                    break;
                case /* string phoneNumber */ 4:
                    message.phoneNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdminConfigChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string defaultNotificationType = 2; */
        if (message.defaultNotificationType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.defaultNotificationType);
        /* string email = 3; */
        if (message.email !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.email);
        /* string phoneNumber = 4; */
        if (message.phoneNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.phoneNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const AdminConfigChange = new AdminConfigChange$Type();
/**
 * Type for protobuf message Notification
 */
class Notification$Type extends MessageType<Notification> {
    constructor() {
        super("Notification", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "meerkatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Notification>): Notification {
        const message = { token: "", meerkatId: "", message: "", type: "" };
        if (value !== undefined)
            reflectionMergePartial<Notification>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Notification): Notification {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                case /* string meerkatId */ 2:
                    message.meerkatId = reader.string();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                case /* string type */ 4:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Notification, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* string meerkatId = 2; */
        if (message.meerkatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.meerkatId);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        /* string type = 4; */
        if (message.type !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const Notification = new Notification$Type();
/**
 * Type for protobuf message NotificationData
 */
class NotificationData$Type extends MessageType<NotificationData> {
    constructor() {
        super("NotificationData", [
            { no: 1, name: "to", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationData>): NotificationData {
        const message = { to: "", content: "" };
        if (value !== undefined)
            reflectionMergePartial<NotificationData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationData): NotificationData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string to */ 1:
                    message.to = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string to = 1; */
        if (message.to !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.to);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const NotificationData = new NotificationData$Type();
/**
 * Type for protobuf message MeerkatData
 */
class MeerkatData$Type extends MessageType<MeerkatData> {
    constructor() {
        super("MeerkatData", [
            { no: 1, name: "cpu", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ram", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<MeerkatData>): MeerkatData {
        const message = { cpu: "", ram: "", type: "" };
        if (value !== undefined)
            reflectionMergePartial<MeerkatData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MeerkatData): MeerkatData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cpu */ 1:
                    message.cpu = reader.string();
                    break;
                case /* string ram */ 2:
                    message.ram = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 4:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MeerkatData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cpu = 1; */
        if (message.cpu !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cpu);
        /* string ram = 2; */
        if (message.ram !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.ram);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* google.protobuf.Timestamp timestamp = 4; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const MeerkatData = new MeerkatData$Type();
/**
 * Type for protobuf message AdminInfo
 */
class AdminInfo$Type extends MessageType<AdminInfo> {
    constructor() {
        super("AdminInfo", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "triggerLevel", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AdminInfo>): AdminInfo {
        const message = { id: "", email: "", phone: "", triggerLevel: "" };
        if (value !== undefined)
            reflectionMergePartial<AdminInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdminInfo): AdminInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* string phone */ 3:
                    message.phone = reader.string();
                    break;
                case /* string triggerLevel */ 4:
                    message.triggerLevel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdminInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* string phone = 3; */
        if (message.phone !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.phone);
        /* string triggerLevel = 4; */
        if (message.triggerLevel !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.triggerLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const AdminInfo = new AdminInfo$Type();
/**
 * Type for protobuf message MeerkatInfo
 */
class MeerkatInfo$Type extends MessageType<MeerkatInfo> {
    constructor() {
        super("MeerkatInfo", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "adminInfo", kind: "message", T: () => AdminInfo }
        ]);
    }
    create(value?: PartialMessage<MeerkatInfo>): MeerkatInfo {
        const message = { id: "", name: "", token: "" };
        if (value !== undefined)
            reflectionMergePartial<MeerkatInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MeerkatInfo): MeerkatInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string token */ 3:
                    message.token = reader.string();
                    break;
                case /* AdminInfo adminInfo */ 4:
                    message.adminInfo = AdminInfo.internalBinaryRead(reader, reader.uint32(), options, message.adminInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MeerkatInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string token = 3; */
        if (message.token !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.token);
        /* AdminInfo adminInfo = 4; */
        if (message.adminInfo)
            AdminInfo.internalBinaryWrite(message.adminInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const MeerkatInfo = new MeerkatInfo$Type();
/**
 * Type for protobuf message MeerkatInfoList
 */
class MeerkatInfoList$Type extends MessageType<MeerkatInfoList> {
    constructor() {
        super("MeerkatInfoList", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MeerkatInfo }
        ]);
    }
    create(value?: PartialMessage<MeerkatInfoList>): MeerkatInfoList {
        const message = { list: [] };
        if (value !== undefined)
            reflectionMergePartial<MeerkatInfoList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MeerkatInfoList): MeerkatInfoList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MeerkatInfo list */ 1:
                    message.list.push(MeerkatInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MeerkatInfoList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MeerkatInfo list = 1; */
        for (let i = 0; i < message.list.length; i++)
            MeerkatInfo.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const MeerkatInfoList = new MeerkatInfoList$Type();
/**
 * Type for protobuf message AdminClient
 */
class AdminClient$Type extends MessageType<AdminClient> {
    constructor() {
        super("AdminClient", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "meerkatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AdminClient>): AdminClient {
        const message = { userId: "", meerkatId: "", name: "" };
        if (value !== undefined)
            reflectionMergePartial<AdminClient>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdminClient): AdminClient {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* string meerkatId */ 2:
                    message.meerkatId = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdminClient, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string meerkatId = 2; */
        if (message.meerkatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.meerkatId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const AdminClient = new AdminClient$Type();
/**
 * Type for protobuf message AdminClientList
 */
class AdminClientList$Type extends MessageType<AdminClientList> {
    constructor() {
        super("AdminClientList", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AdminClient }
        ]);
    }
    create(value?: PartialMessage<AdminClientList>): AdminClientList {
        const message = { list: [] };
        if (value !== undefined)
            reflectionMergePartial<AdminClientList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdminClientList): AdminClientList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated AdminClient list */ 1:
                    message.list.push(AdminClient.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdminClientList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated AdminClient list = 1; */
        for (let i = 0; i < message.list.length; i++)
            AdminClient.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const AdminClientList = new AdminClientList$Type();
/**
 * Type for protobuf message MeerkatLog
 */
class MeerkatLog$Type extends MessageType<MeerkatLog> {
    constructor() {
        super("MeerkatLog", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cpuUsage", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "ramUsage", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 6, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MeerkatLog>): MeerkatLog {
        const message = { id: "", cpuUsage: 0, ramUsage: 0, type: "", name: "" };
        if (value !== undefined)
            reflectionMergePartial<MeerkatLog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MeerkatLog): MeerkatLog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* double cpuUsage */ 2:
                    message.cpuUsage = reader.double();
                    break;
                case /* double ramUsage */ 3:
                    message.ramUsage = reader.double();
                    break;
                case /* string type */ 4:
                    message.type = reader.string();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 5:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* string name */ 6:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MeerkatLog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* double cpuUsage = 2; */
        if (message.cpuUsage !== 0)
            writer.tag(2, WireType.Bit64).double(message.cpuUsage);
        /* double ramUsage = 3; */
        if (message.ramUsage !== 0)
            writer.tag(3, WireType.Bit64).double(message.ramUsage);
        /* string type = 4; */
        if (message.type !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.type);
        /* google.protobuf.Timestamp timestamp = 5; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string name = 6; */
        if (message.name !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const MeerkatLog = new MeerkatLog$Type();
/**
 * Type for protobuf message MeerkatLogList
 */
class MeerkatLogList$Type extends MessageType<MeerkatLogList> {
    constructor() {
        super("MeerkatLogList", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MeerkatLog }
        ]);
    }
    create(value?: PartialMessage<MeerkatLogList>): MeerkatLogList {
        const message = { list: [] };
        if (value !== undefined)
            reflectionMergePartial<MeerkatLogList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MeerkatLogList): MeerkatLogList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MeerkatLog list */ 1:
                    message.list.push(MeerkatLog.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MeerkatLogList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MeerkatLog list = 1; */
        for (let i = 0; i < message.list.length; i++)
            MeerkatLog.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const MeerkatLogList = new MeerkatLogList$Type();
